/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class shapefileObj : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal shapefileObj(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(shapefileObj obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~shapefileObj() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        mapscriptPINVOKE.delete_shapefileObj(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public string source {
    get {
      string ret = mapscriptPINVOKE.shapefileObj_source_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int type {
    get {
      int ret = mapscriptPINVOKE.shapefileObj_type_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int numshapes {
    get {
      int ret = mapscriptPINVOKE.shapefileObj_numshapes_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public rectObj bounds {
    get {
      IntPtr cPtr = mapscriptPINVOKE.shapefileObj_bounds_get(swigCPtr);
      rectObj ret = (cPtr == IntPtr.Zero) ? null : new rectObj(cPtr, false);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int lastshape {
    get {
      int ret = mapscriptPINVOKE.shapefileObj_lastshape_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string status {
    get {
      string ret = mapscriptPINVOKE.shapefileObj_status_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public rectObj statusbounds {
    get {
      IntPtr cPtr = mapscriptPINVOKE.shapefileObj_statusbounds_get(swigCPtr);
      rectObj ret = (cPtr == IntPtr.Zero) ? null : new rectObj(cPtr, false);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int isopen {
    get {
      int ret = mapscriptPINVOKE.shapefileObj_isopen_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public shapefileObj(string filename, int type) : this(mapscriptPINVOKE.new_shapefileObj(filename, type), true) {
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
  }

  public int get(int i, shapeObj shape) {
    int ret = mapscriptPINVOKE.shapefileObj_get(swigCPtr, i, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public shapeObj getShape(int i) {
    IntPtr cPtr = mapscriptPINVOKE.shapefileObj_getShape(swigCPtr, i);
    shapeObj ret = (cPtr == IntPtr.Zero) ? null : new shapeObj(cPtr, true);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getPoint(int i, pointObj point) {
    int ret = mapscriptPINVOKE.shapefileObj_getPoint(swigCPtr, i, pointObj.getCPtr(point));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getTransformed(mapObj map, int i, shapeObj shape) {
    int ret = mapscriptPINVOKE.shapefileObj_getTransformed(swigCPtr, mapObj.getCPtr(map), i, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getExtent(int i, rectObj rect) {
    mapscriptPINVOKE.shapefileObj_getExtent(swigCPtr, i, rectObj.getCPtr(rect));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
  }

  public int add(shapeObj shape) {
    int ret = mapscriptPINVOKE.shapefileObj_add(swigCPtr, shapeObj.getCPtr(shape));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int addPoint(pointObj point) {
    int ret = mapscriptPINVOKE.shapefileObj_addPoint(swigCPtr, pointObj.getCPtr(point));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DBFInfo getDBF() {
    IntPtr cPtr = mapscriptPINVOKE.shapefileObj_getDBF(swigCPtr);
    DBFInfo ret = (cPtr == IntPtr.Zero) ? null : new DBFInfo(cPtr, false);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
