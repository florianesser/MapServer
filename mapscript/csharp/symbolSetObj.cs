/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class symbolSetObj : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal symbolSetObj(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(symbolSetObj obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~symbolSetObj() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        mapscriptPINVOKE.delete_symbolSetObj(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public string filename {
    set {
      mapscriptPINVOKE.symbolSetObj_filename_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = mapscriptPINVOKE.symbolSetObj_filename_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int imagecachesize {
    set {
      mapscriptPINVOKE.symbolSetObj_imagecachesize_set(swigCPtr, value);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = mapscriptPINVOKE.symbolSetObj_imagecachesize_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int numsymbols {
    get {
      int ret = mapscriptPINVOKE.symbolSetObj_numsymbols_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int maxsymbols {
    get {
      int ret = mapscriptPINVOKE.symbolSetObj_maxsymbols_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public symbolSetObj(string symbolfile) : this(mapscriptPINVOKE.new_symbolSetObj(symbolfile), true) {
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
  }

  public symbolObj getSymbol(int i) {
    IntPtr cPtr = mapscriptPINVOKE.symbolSetObj_getSymbol(swigCPtr, i);
    symbolObj ret = (cPtr == IntPtr.Zero) ? null : new symbolObj(cPtr, true);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public symbolObj getSymbolByName(string symbolname) {
    IntPtr cPtr = mapscriptPINVOKE.symbolSetObj_getSymbolByName(swigCPtr, symbolname);
    symbolObj ret = (cPtr == IntPtr.Zero) ? null : new symbolObj(cPtr, true);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int index(string symbolname) {
    int ret = mapscriptPINVOKE.symbolSetObj_index(swigCPtr, symbolname);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int appendSymbol(symbolObj symbol) {
    int ret = mapscriptPINVOKE.symbolSetObj_appendSymbol(swigCPtr, symbolObj.getCPtr(symbol));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public symbolObj removeSymbol(int index) {
    IntPtr cPtr = mapscriptPINVOKE.symbolSetObj_removeSymbol(swigCPtr, index);
    symbolObj ret = (cPtr == IntPtr.Zero) ? null : new symbolObj(cPtr, true);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int save(string filename) {
    int ret = mapscriptPINVOKE.symbolSetObj_save(swigCPtr, filename);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
