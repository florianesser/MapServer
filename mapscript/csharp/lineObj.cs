/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class lineObj : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal lineObj(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(lineObj obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~lineObj() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        mapscriptPINVOKE.delete_lineObj(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public int numpoints {
    get {
      int ret = mapscriptPINVOKE.lineObj_numpoints_get(swigCPtr);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public pointObj point {
    get {
      IntPtr cPtr = mapscriptPINVOKE.lineObj_point_get(swigCPtr);
      pointObj ret = (cPtr == IntPtr.Zero) ? null : new pointObj(cPtr, false);
      if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public lineObj() : this(mapscriptPINVOKE.new_lineObj(), true) {
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
  }

  public int project(projectionObj projin, projectionObj projout) {
    int ret = mapscriptPINVOKE.lineObj_project(swigCPtr, projectionObj.getCPtr(projin), projectionObj.getCPtr(projout));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public pointObj get(int i) {
    IntPtr cPtr = mapscriptPINVOKE.lineObj_get(swigCPtr, i);
    pointObj ret = (cPtr == IntPtr.Zero) ? null : new pointObj(cPtr, false);
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int add(pointObj p) {
    int ret = mapscriptPINVOKE.lineObj_add(swigCPtr, pointObj.getCPtr(p));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int set(int i, pointObj p) {
    int ret = mapscriptPINVOKE.lineObj_set(swigCPtr, i, pointObj.getCPtr(p));
    if (mapscriptPINVOKE.SWIGPendingException.Pending) throw mapscriptPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
