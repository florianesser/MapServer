#! /bin/sh /usr/share/dpatch/dpatch-run
## 85_CVE-2009-0842.dpatch by Alan Boudreault <aboudreault@mapgears.com>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad mapserver-4.10.0~/map.h mapserver-4.10.0/map.h
--- mapserver-4.10.0~/map.h	2006-10-04 10:54:49.000000000 -0400
+++ mapserver-4.10.0/map.h	2009-07-14 13:06:22.521857713 -0400
@@ -242,7 +242,9 @@
 /* General defines, not wrapable */
 #ifndef SWIG
 #define MS_DEFAULT_MAPFILE_PATTERN "\\.map$"
-#define MS_TEMPLATE_EXPR "\\.(jsp|asp|cfm|xml|wml|html|htm|shtml|phtml|php|svg)$"
+
+#define MS_TEMPLATE_MAGIC_STRING "MapServer Template"
+#define MS_TEMPLATE_EXPR "\\.(xml|wml|html|htm|svg|kml|gml|js|tmpl)$"
 
 #define MS_INDEX_EXTENSION ".qix"
 #define MS_QUERY_EXTENSION ".qy"
@@ -1482,6 +1484,7 @@
 MS_DLL_EXPORT char *msJoinStrings(char **array, int arrayLength, const char *delimeter);
 MS_DLL_EXPORT char *msHashString(const char *pszStr);
 MS_DLL_EXPORT char *msCommifyString(char *str);
+MS_DLL_EXPORT const char *msCaseFindSubstring(const char *haystack, const char *needle);
 
 #ifdef NEED_STRDUP
 MS_DLL_EXPORT char *strdup(char *s);
diff -urNad mapserver-4.10.0~/mapstring.c mapserver-4.10.0/mapstring.c
--- mapserver-4.10.0~/mapstring.c	2006-08-16 10:05:07.000000000 -0400
+++ mapserver-4.10.0/mapstring.c	2009-07-14 13:06:22.521857713 -0400
@@ -933,3 +933,34 @@
 
   return str;
 }
+
+/************************************************************************/
+/*                  case incensitive equivalent of strstr               */
+/************************************************************************/
+const char *msCaseFindSubstring(const char *haystack, const char *needle)
+{
+  if ( !*needle )
+    {
+      return haystack;
+    }
+  for ( ; *haystack; ++haystack )
+    {
+      if ( toupper(*haystack) == toupper(*needle) )
+        {
+	  /*          * Matched starting char -- loop through remaining chars.          */
+	  const char *h, *n;
+	  for ( h = haystack, n = needle; *h && *n; ++h, ++n )
+            {
+	      if ( toupper(*h) != toupper(*n) )
+		{
+		  break;
+                }
+            }
+	  if ( !*n ) /* matched all of 'needle' to null termination */
+            {
+	      return haystack; /* return the start of the match */
+            }
+        }
+    }
+  return 0;
+}
diff -urNad mapserver-4.10.0~/maptemplate.c mapserver-4.10.0/maptemplate.c
--- mapserver-4.10.0~/maptemplate.c	2006-09-29 16:52:05.000000000 -0400
+++ mapserver-4.10.0/maptemplate.c	2009-07-14 13:06:22.521857713 -0400
@@ -130,6 +130,20 @@
 
 char *processLine(mapservObj* msObj, char* instr, int mode);
 
+static int isValidTemplate(FILE *stream, const char *filename)
+{
+  char buffer[MS_BUFFER_LENGTH];
+
+  if(fgets(buffer, MS_BUFFER_LENGTH, stream) != NULL) {
+    if(!msCaseFindSubstring(buffer, MS_TEMPLATE_MAGIC_STRING)) {
+      msSetError(MS_WEBERR, "Missing magic string, %s doesn't look like a MapServer template.", "isValidTemplate()", filename);
+      return MS_FALSE;
+    }
+  }
+
+  return MS_TRUE;
+}
+
 /*
  * Redirect to (only use in CGI)
  * 
@@ -2446,6 +2460,11 @@
           return(NULL);
         }
 
+        if(isValidTemplate(stream, join->header) != MS_TRUE) {
+          fclose(stream);
+          return NULL;
+	}
+
         /* echo file to the output buffer, no substitutions */
         while(fgets(line, MS_BUFFER_LENGTH, stream) != NULL) outbuf = strcatalloc(outbuf, line);
 
@@ -2455,8 +2474,13 @@
       if((stream = fopen(msBuildPath(szPath, msObj->Map->mappath, join->template), "r")) == NULL) {
         msSetError(MS_IOERR, "Error while opening join template file %s.", "processOneToManyJoin()", join->template);
         return(NULL);
-      }      
+      }
       
+      if(isValidTemplate(stream, join->header) != MS_TRUE) {
+	fclose(stream);
+	return NULL;
+      }
+
       records = MS_TRUE;
     }
     
@@ -2471,6 +2495,7 @@
     }
       
     rewind(stream);
+    fgets(line, MS_BUFFER_LENGTH, stream); /* skip the first line since it's the magic string */
   } /* next record */
 
   if(records==MS_TRUE && join->footer) {    
@@ -2479,6 +2504,11 @@
       return(NULL);
     }
 
+    if(isValidTemplate(stream, join->footer) != MS_TRUE) {
+      fclose(stream);
+      return NULL;
+    }
+
     /* echo file to the output buffer, no substitutions */
     while(fgets(line, MS_BUFFER_LENGTH, stream) != NULL) outbuf = strcatalloc(outbuf, line);
     
@@ -3007,6 +3037,11 @@
     return MS_FAILURE;
   } 
 
+  if(isValidTemplate(stream, html) != MS_TRUE) {
+    fclose(stream);
+    return MS_FAILURE;
+  }
+
   if (papszBuffer)
   {
       if ((*papszBuffer) == NULL)
diff -urNad mapserver-4.10.0~/mapfile.c mapserver-4.10.0/mapfile.c
--- mapserver-4.10.0~/mapfile.c	2006-08-31 22:30:15.000000000 -0400
+++ mapserver-4.10.0/mapfile.c	2009-07-14 13:11:33.301856800 -0400
@@ -4543,6 +4543,9 @@
   int i,j,k;
   char szPath[MS_MAXPATHLEN], szCWDPath[MS_MAXPATHLEN];
 
+  int foundMapToken=MS_FALSE;
+  int token;
+
   if(!filename) {
     msSetError(MS_MISCERR, "Filename is undefined.", "msLoadMap()");
     return(NULL);
@@ -4592,7 +4595,14 @@
 
   for(;;) {
 
-    switch(msyylex()) {   
+    token = msyylex();
+  
+    if(!foundMapToken && token != MAP) {
+      msSetError(MS_IDENTERR, "First token must be MAP, this doesn't look like a mapfile.", "msLoadMap()");
+      return(NULL);
+    }
+
+    switch(token) {
 
     case(CONFIG):
     {
@@ -4717,7 +4727,8 @@
       if(loadLegend(&(map->legend), map) == -1) return(NULL);
       break;
     case(MAP):
-      break;   
+      foundMapToken = MS_TRUE;
+      break;
     case(MAXSIZE):
       if(getInteger(&(map->maxsize)) == -1) return(NULL);
       break;
diff -urNad mapserver-4.10.0~/mapsymbol.c mapserver-4.10.0/mapsymbol.c
--- mapserver-4.10.0~/mapsymbol.c	2006-07-22 23:28:45.000000000 -0400
+++ mapserver-4.10.0/mapsymbol.c	2009-07-14 13:11:33.301856800 -0400
@@ -632,7 +632,7 @@
 int msLoadSymbolSet(symbolSetObj *symbolset, mapObj *map)
 {
     int retval = MS_FAILURE;
-    
+
     msAcquireLock( TLOCK_PARSER );
     retval = loadSymbolSet( symbolset, map );
     msReleaseLock( TLOCK_PARSER );
@@ -647,6 +647,9 @@
   int status=1;
   char szPath[MS_MAXPATHLEN], *pszSymbolPath=NULL;
 
+  int foundSymbolSetToken=MS_FALSE;
+  int token;
+
   if(!symbolset) {
     msSetError(MS_SYMERR, "Symbol structure unallocated.", "loadSymbolSet()");
     return(-1);
@@ -673,7 +676,15 @@
   ** Read the symbol file
   */
   for(;;) {
-    switch(msyylex()) {
+
+    token = msyylex();
+
+    if(!foundSymbolSetToken && token != SYMBOLSET) {
+      msSetError(MS_IDENTERR, "First token must be SYMBOLSET, this doesn't look like a symbol file.", "msLoadSymbolSet()");
+      return(-1);
+    }
+
+    switch(token) {
     case(END):
     case(EOF):      
       status = 0;
@@ -688,6 +699,7 @@
       symbolset->numsymbols++;
       break;
     case(SYMBOLSET):
+      foundSymbolSetToken = MS_TRUE;
       break;
     default:
       msSetError(MS_IDENTERR, "Parsing error near (%s):(line %d)", "loadSymbolSet()", msyytext, msyylineno);
diff -urNad mapserver-4.10.0~/tests/symbols.txt mapserver-4.10.0/tests/symbols.txt
--- mapserver-4.10.0~/tests/symbols.txt	2004-11-18 10:07:36.000000000 -0500
+++ mapserver-4.10.0/tests/symbols.txt	2009-07-14 13:11:33.311860683 -0400
@@ -1,22 +1,23 @@
-
-SYMBOL
+SYMBOLSET
+  SYMBOL
     NAME 'circle' 
     TYPE ellipse 
     FILLED true 
     POINTS
       1 1 
     END 
-END
+  END
 
-SYMBOL
+  SYMBOL
     NAME 'xmarks-png'
     TYPE PIXMAP
     IMAGE 'xmarks.png'
-END
+  END
 
-SYMBOL
+  SYMBOL
     NAME 'home-png'
     TYPE PIXMAP
     IMAGE 'home.png'
+  END
 END
 
